import { Sequelize } from 'sequelize';
import path from 'path';
import fs from 'fs';
import { Device } from '../models/Device';
import { DeviceReference } from '../models/DeviceReference';
import { Kip } from '../models/Kip';
import { Zra } from '../models/Zra';
import { Signal } from '../models/Signal';
import { DeviceSignal } from '../models/DeviceSignal';
import { DeviceTypeSignal } from '../models/DeviceTypeSignal';
import { Project } from '../models/Project';

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: process.env.NODE_ENV === 'test' 
    ? ':memory:' 
    : path.join(__dirname, '../../database.sqlite'),
  logging: process.env.NODE_ENV === 'development' ? console.log : false,
  define: {
    timestamps: true,
    underscored: false,
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
const checkColumnExists = async (tableName: string, columnName: string): Promise<boolean> => {
  try {
    const [columns] = await sequelize.query(`PRAGMA table_info('${tableName}')`);
    return Array.isArray(columns) && (columns as any[]).some(col => col.name === columnName);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–æ–Ω–∫–∏ ${columnName} –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}:`, error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
const checkTableExists = async (tableName: string): Promise<boolean> => {
  try {
    const [tables] = await sequelize.query(`SELECT name FROM sqlite_master WHERE type='table' AND name='${tableName}'`);
    return Array.isArray(tables) && tables.length > 0;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error);
    return false;
  }
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
const ensureProjectMigration = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã projects
    const projectsTableExists = await checkTableExists('projects');
    if (!projectsTableExists) {
      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã projects...');
      await sequelize.query(`
        CREATE TABLE projects (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          code VARCHAR(50) UNIQUE NOT NULL,
          status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'template')),
          created_by INTEGER,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          settings TEXT
        )
      `);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ projects —Å–æ–∑–¥–∞–Ω–∞');
    }

    // 2. –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    try {
      await sequelize.query(`
        INSERT OR IGNORE INTO projects (id, name, code, description, status) 
        VALUES (1, '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç', 'DEFAULT', '–ü—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö', 'active')
      `);
    } catch (error) {
      console.log('‚ö†Ô∏è  –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º project_id –≤ device_references
    const deviceReferencesTableExists = await checkTableExists('device_references');
    if (deviceReferencesTableExists) {
      const hasProjectId = await checkColumnExists('device_references', 'project_id');
      if (!hasProjectId) {
        console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ device_references...');
        await sequelize.query(`ALTER TABLE device_references ADD COLUMN project_id INTEGER DEFAULT 1`);
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ project_id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ device_references');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        await sequelize.query(`UPDATE device_references SET project_id = 1 WHERE project_id IS NULL`);
        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º project_id –≤ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesToUpdate = [
      { name: 'devices', column: 'project_id' },
      { name: 'kips', column: 'project_id' },
      { name: 'zras', column: 'project_id' },
      { name: 'signals', column: 'project_id' },
      { name: 'device_type_signals', column: 'project_id' },
      { name: 'device_signals', column: 'project_id' }
    ];

    for (const table of tablesToUpdate) {
      const tableExists = await checkTableExists(table.name);
      if (tableExists) {
        const hasColumn = await checkColumnExists(table.name, table.column);
        if (!hasColumn) {
          console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${table.column} –≤ ${table.name}...`);
          try {
            await sequelize.query(`ALTER TABLE ${table.name} ADD COLUMN ${table.column} INTEGER DEFAULT 1`);
            console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${table.column} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ${table.name}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            await sequelize.query(`UPDATE ${table.name} SET ${table.column} = 1 WHERE ${table.column} IS NULL`);
          } catch (error: any) {
            if (!error.message.includes('duplicate column name')) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ –≤ ${table.name}:`, error.message);
            }
          }
        }
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_device_references_project_id ON device_references(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_devices_project_id ON devices(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_kips_project_id ON kips(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_zras_project_id ON zras(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_signals_project_id ON signals(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_device_type_signals_project_id ON device_type_signals(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_device_signals_project_id ON device_signals(project_id)'
    ];

    for (const indexQuery of indexes) {
      try {
        await sequelize.query(indexQuery);
      } catch (error: any) {
        if (!error.message.includes('already exists')) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:', error.message);
        }
      }
    }

    // 6. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è device_references
    try {
      await sequelize.query('DROP INDEX IF EXISTS sqlite_autoindex_device_references_1');
      await sequelize.query('CREATE UNIQUE INDEX IF NOT EXISTS idx_device_references_proj_pos ON device_references(project_id, posDesignation)');
    } catch (error: any) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:', error.message);
    }

    // 7. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
    try {
      await sequelize.query(`
        CREATE TRIGGER IF NOT EXISTS update_projects_updated_at 
        AFTER UPDATE ON projects
        FOR EACH ROW
        BEGIN
          UPDATE projects SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
        END
      `);
    } catch (error: any) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞:', error.message);
    }

    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è PostgreSQL (–¥–ª—è —Å–µ—Ç–µ–≤–æ–π –≤–µ—Ä—Å–∏–∏)
// const sequelize = new Sequelize({
//   dialect: 'postgres',
//   host: process.env.DB_HOST || 'localhost',
//   port: parseInt(process.env.DB_PORT || '5432'),
//   username: process.env.DB_USER || 'postgres',
//   password: process.env.DB_PASSWORD || 'postgres',
//   database: process.env.DB_NAME || 'asuopt',
//   logging: false,
// });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
const initializeDatabase = async () => {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤
    await ensureProjectMigration();

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

export { sequelize, initializeDatabase, ensureProjectMigration }; 