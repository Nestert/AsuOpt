import { sequelize, ensureProjectMigration } from '../config/database';

async function fixDatabase() {
  console.log('üõ†Ô∏è  –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤
    await ensureProjectMigration();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É devices
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã devices...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ project_id –≤ devices
    const [devicesColumns] = await sequelize.query(`PRAGMA table_info('devices')`);
    const hasProjectIdInDevices = Array.isArray(devicesColumns) && 
      (devicesColumns as any[]).some(col => col.name === 'project_id');

    if (!hasProjectIdInDevices) {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ —Ç–∞–±–ª–∏—Ü—É devices...');
      await sequelize.query(`ALTER TABLE devices ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ project_id –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ devices');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
      await sequelize.query(`UPDATE devices SET project_id = 1 WHERE project_id IS NULL`);
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ devices –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
      await sequelize.query('CREATE INDEX IF NOT EXISTS idx_devices_project_id ON devices(project_id)');
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è devices.project_id —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ project_id –≤ devices —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesToCheck = [
      { name: 'device_signals', column: 'project_id' },
      { name: 'device_signals', column: 'device_reference_id' }
    ];

    for (const table of tablesToCheck) {
      try {
        const [tableExists] = await sequelize.query(`SELECT name FROM sqlite_master WHERE type='table' AND name='${table.name}'`);
        if (Array.isArray(tableExists) && tableExists.length > 0) {
          const [columns] = await sequelize.query(`PRAGMA table_info('${table.name}')`);
          const hasColumn = Array.isArray(columns) && 
            (columns as any[]).some(col => col.name === table.column);
          
          if (!hasColumn && table.column === 'project_id') {
            console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${table.column} –≤ ${table.name}...`);
            await sequelize.query(`ALTER TABLE ${table.name} ADD COLUMN ${table.column} INTEGER DEFAULT 1`);
            await sequelize.query(`UPDATE ${table.name} SET ${table.column} = 1 WHERE ${table.column} IS NULL`);
            console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${table.column} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ ${table.name}`);
          }
        }
      } catch (error: any) {
        if (!error.message.includes('duplicate column name')) {
          console.error(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${table.name}.${table.column}:`, error.message);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const [deviceReferencesCount] = await sequelize.query(`SELECT COUNT(*) as count FROM device_references WHERE project_id IS NOT NULL`);
    const [devicesCount] = await sequelize.query(`SELECT COUNT(*) as count FROM devices WHERE project_id IS NOT NULL`);
    const [projectsCount] = await sequelize.query(`SELECT COUNT(*) as count FROM projects`);

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log(`   - –ü—Ä–æ–µ–∫—Ç—ã: ${(projectsCount as any[])[0]?.count || 0}`);
    console.log(`   - Device References —Å project_id: ${(deviceReferencesCount as any[])[0]?.count || 0}`);
    console.log(`   - Devices —Å project_id: ${(devicesCount as any[])[0]?.count || 0}`);

    console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  fixDatabase()
    .then(() => {
      console.log('üéâ –°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
} 