import { initializeDatabase } from '../config/database';
import { sequelize } from '../config/database';

async function runMigrationStep() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await initializeDatabase();
    
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üìù –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã projects...');
    try {
      await sequelize.query(`
        CREATE TABLE IF NOT EXISTS projects (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          code VARCHAR(50) UNIQUE NOT NULL,
          status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'template')),
          created_by INTEGER,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          settings TEXT
        )
      `);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ projects —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ projects —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üìù –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      await sequelize.query(`
        INSERT INTO projects (name, code, description, status) 
        VALUES ('–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç', 'DEFAULT', '–ü—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö', 'active')
      `);
      console.log('‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è  –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ device_references
    console.log('üìù –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ device_references...');
    try {
      await sequelize.query(`ALTER TABLE device_references ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü project_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ device_references');
    } catch (error) {
      console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü project_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ device_references');
    }
    
    // –®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ kips
    console.log('üìù –®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ kips...');
    try {
      await sequelize.query(`ALTER TABLE kips ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü project_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ kips');
    } catch (error) {
      console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü project_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ kips');
    }
    
    // –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ zras
    console.log('üìù –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ zras...');
    try {
      await sequelize.query(`ALTER TABLE zras ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü project_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ zras');
    } catch (error) {
      console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü project_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ zras');
    }
    
    // –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ signals
    console.log('üìù –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ signals...');
    try {
      await sequelize.query(`ALTER TABLE signals ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü project_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ signals');
    } catch (error) {
      console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü project_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ signals');
    }
    
    // –®–∞–≥ 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ device_type_signals
    console.log('üìù –®–∞–≥ 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ project_id –≤ device_type_signals...');
    try {
      await sequelize.query(`ALTER TABLE device_type_signals ADD COLUMN project_id INTEGER DEFAULT 1`);
      console.log('‚úÖ –°—Ç–æ–ª–±–µ—Ü project_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ device_type_signals');
    } catch (error) {
      console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±–µ—Ü project_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ device_type_signals');
    }
    
    // –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    console.log('üìù –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_device_references_project_id ON device_references(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_kips_project_id ON kips(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_zras_project_id ON zras(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_signals_project_id ON signals(project_id)',
      'CREATE INDEX IF NOT EXISTS idx_device_type_signals_project_id ON device_type_signals(project_id)'
    ];
    
    for (const indexSQL of indexes) {
      try {
        await sequelize.query(indexSQL);
        console.log(`‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: ${indexSQL.split(' ')[5]}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${indexSQL.split(' ')[5]}`);
      }
    }
    
    // –®–∞–≥ 9: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —à–∞–±–ª–æ–Ω–æ–≤
    console.log('üìù –®–∞–≥ 9: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã project_templates...');
    try {
      await sequelize.query(`
        CREATE TABLE IF NOT EXISTS project_templates (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name VARCHAR(255) NOT NULL,
          description TEXT,
          category VARCHAR(100),
          template_data TEXT,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ project_templates —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ project_templates —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    const [projects] = await sequelize.query('SELECT * FROM projects');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    
    const [devices] = await sequelize.query('SELECT id, project_id FROM device_references LIMIT 5');
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ device_references: –Ω–∞–π–¥–µ–Ω–æ ${devices.length} –∑–∞–ø–∏—Å–µ–π —Å project_id`);
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:');
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ projects');
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç');
    console.log('   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω project_id –≤–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã');
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ project_templates');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await sequelize.close();
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runMigrationStep(); 