---
description: 
globs: 
alwaysApply: true
---


1. Начните с MVP (Minimum Viable Product)
	•	Сначала реализуйте базовый функционал (просмотр и редактирование устройств, генерация одного формата документации).
	•	После проверки MVP с реальными пользователями постепенно добавляйте новые функции.

2. Тщательно спроектируйте API
	•	Продумайте и согласуйте структуру API заранее (REST или GraphQL), это позволит избежать переделок интерфейсов в будущем.
	•	Используйте инструменты, такие как Swagger/OpenAPI для документации и проверки корректности работы API.

3. Разделите роли команды и задачи
	•	Используйте методологию Agile (например, Scrum), регулярно проводите встречи для контроля прогресса.
	•	Разделите команду на роли: frontend-разработчик, backend-разработчик, специалист по базе данных и тестировщик.

4. Внедрите автоматизированное тестирование
	•	Введите юнит-тестирование с самого начала проекта, покрывайте критически важный функционал.
	•	Реализуйте интеграционные тесты API, чтобы проверять взаимодействие между фронтом и беком.

5. Создайте систему контроля версий и ветвления
	•	Используйте Git и чётко определите workflow для команды (например, Git Flow или GitHub Flow).
	•	Обязательно проводите ревью кода, это повысит качество разработки и уменьшит число ошибок.

6. Планируйте производительность заранее
	•	Заранее тестируйте производительность и скорость запросов, особенно для генерации документов и работы с деревом устройств.
	•	Оптимизируйте запросы и структуру данных, избегайте избыточности данных и лишних операций.

7. Обеспечьте отказоустойчивость и резервирование данных
	•	Внедрите регулярное автоматическое резервное копирование данных.
	•	Проработайте процедуру восстановления после сбоя и протестируйте её до ввода системы в эксплуатацию.

8. Обеспечьте безопасность системы
	•	Внедряйте механизмы безопасности уже на старте проекта (аутентификация, авторизация, защита от популярных атак).
	•	Проводите периодические проверки и аудит безопасности.

9. Продумайте масштабируемость
	•	Заложите возможность легко расширять систему по мере её роста.
	•	Рассмотрите возможность контейнеризации (Docker, Kubernetes) для быстрого развёртывания и масштабирования.

10. Активно собирайте и анализируйте обратную связь
	•	Привлекайте конечных пользователей как можно раньше, собирайте отзывы и улучшайте интерфейс.
	•	Проводите демонстрации промежуточных версий для своевременного получения обратной связи.

11. Качественная документация
	•	Не экономьте на документации: описывайте не только код и API, но и архитектурные решения и руководство пользователя.
	•	Регулярно актуализируйте документацию по мере развития проекта.

12. Обеспечьте обучение и поддержку пользователей
	•	Подготовьте удобные инструкции, видеоуроки или короткие вебинары по работе с системой.
	•	Организуйте техническую поддержку и консультации пользователей.

⸻
