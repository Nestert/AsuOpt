---
description: 
globs: 
alwaysApply: true
---


1. Общая архитектура

Приложение разделено на три основных слоя:
	•	Клиентский (Frontend) – отвечает за отображение информации, взаимодействие с пользователем и отправку запросов к серверу.
	•	Серверный (Backend) – реализует бизнес-логику, обеспечивает обработку запросов от клиента, взаимодействует с базой данных и выполняет задачи по генерации документов.
	•	Хранилище данных (База данных) – реляционная база данных (SQLite для локального варианта или PostgreSQL для сетевого), содержащая сведения об устройствах и другую служебную информацию.

Также предусмотрены вспомогательные сервисы для аутентификации, логирования, мониторинга и интеграции с внешними системами.

⸻

2. Клиентская часть (Frontend)
	•	Технология: React
	•	Структура приложения:
	•	Компонент древовидного меню: Отображает иерархическую структуру устройств с возможностью поиска, фильтрации, раскрытия и сворачивания веток.
	•	Панель детальной информации: Отображает характеристики выбранного устройства и позволяет редактировать его параметры.
	•	Интерфейс генерации документов: Позволяет настроить параметры экспорта (Excel, Word, PDF) и отправить запрос на формирование документа.
	•	Взаимодействие с сервером:
	•	Все данные запрашиваются через API (REST или GraphQL) посредством HTTPS.
	•	Реализована обработка состояний (загрузка, ошибки, успешное выполнение операций) для обеспечения хорошего UX.
	•	Дополнительные возможности:
	•	Адаптивный дизайн для корректного отображения на разных устройствах (десктоп, планшет, мобильный).
	•	Поддержка многоязычности, если потребуется расширение функционала.

⸻

3. Серверная часть (Backend)
	•	Технология: Node.js с использованием фреймворка (Express.js или NestJS)
	•	Основные компоненты:
	•	API слой:
	•	Обработка REST/GraphQL запросов от клиентской части.
	•	Эндпоинты для CRUD-операций с устройствами, а также для аутентификации и управления пользователями.
	•	Бизнес-логика:
	•	Обработка логики управления устройствами, валидация данных, применение бизнес-правил.
	•	Модуль генерации документов:
	•	Использует библиотеки ExcelJS (для Excel), docx (для Word) и PDFKit (для PDF) для создания опросных листов и исходных требований.
	•	Сервис аутентификации и управления доступом:
	•	Реализация аутентификации (например, с использованием JWT) и ролевой модели для разграничения прав доступа.
	•	Интеграция с базой данных:
	•	Работа с ORM (например, Sequelize, TypeORM или Knex.js) для взаимодействия с SQLite или PostgreSQL.
	•	Документация API:
	•	Использование Swagger/OpenAPI для документирования всех доступных эндпоинтов.

⸻

4. База данных
	•	Тип: Реляционная БД
	•	Варианты реализации:
	•	SQLite – для локальных установок или небольших систем.
	•	PostgreSQL – для развертывания в корпоративной сети с высокой нагрузкой.
	•	Основная таблица (Devices):
	•	Поля: ID, SystemCode, EquipmentCode, LineNumber, CabinetName, DeviceDesignation, DeviceType, Description.
	•	Дополнительные таблицы:
	•	Таблицы пользователей, ролей и логов для обеспечения безопасности и аудита.

⸻

5. Взаимодействие и коммуникация
	•	Межслойное взаимодействие:
	•	Frontend ↔ Backend: Передача данных по защищённому каналу (HTTPS) через API.
	•	Backend ↔ База данных: ORM обеспечивает удобное и безопасное взаимодействие с БД.
	•	Взаимодействие с внешними сервисами:
	•	Возможность интеграции с корпоративными системами (ERP, SCADA и т.д.) через API.
	•	Подключение внешних сервисов мониторинга (например, Prometheus, Grafana) для отслеживания состояния приложения.
	•	Контейнеризация и CI/CD:
	•	Приложение развёртывается с использованием Docker.
	•	Реализован процесс CI/CD для автоматизированного тестирования, сборки и развёртывания.

⸻

6. Безопасность и управление доступом
	•	Аутентификация:
	•	Использование JWT или OAuth2 для подтверждения личности пользователей.
	•	Авторизация:
	•	Ролевая модель для разграничения доступа (администратор, оператор, пользователь).
	•	Защита от уязвимостей:
	•	Валидация входных данных, защита от SQL-инъекций, XSS, CSRF.
	•	Шифрование данных:
	•	Обеспечение безопасности передачи данных посредством HTTPS.

⸻

7. Логирование, мониторинг и отказоустойчивость
	•	Логирование:
	•	Центральный сбор логов для отслеживания действий пользователей и системных событий.
	•	Мониторинг:
	•	Интеграция с инструментами мониторинга (Prometheus, Grafana) для своевременного обнаружения сбоев и повышения надежности.
	•	Резервное копирование:
	•	Регулярное создание резервных копий базы данных и важных файлов.
	•	Отказоустойчивость:
	•	Возможность быстрого восстановления после сбоев, а также масштабирование серверной части при росте нагрузки.

⸻

8. Развертывание и поддержка
	•	Контейнеризация:
	•	Приложение упаковывается в Docker-контейнеры для упрощения развертывания и масштабирования.
	•	CI/CD:
	•	Непрерывная интеграция и доставка обновлений с использованием популярных CI/CD инструментов (GitLab CI, Jenkins, GitHub Actions).
	•	Документация:
	•	Полное описание архитектуры, инструкции по развёртыванию, руководство пользователя и техническая документация по API и структурам БД.

